// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goApp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetUserClient is the client API for GetUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetUserClient interface {
	GetUserInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type getUserClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUserClient(cc grpc.ClientConnInterface) GetUserClient {
	return &getUserClient{cc}
}

func (c *getUserClient) GetUserInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/goApp.GetUser/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUserServer is the server API for GetUser service.
// All implementations must embed UnimplementedGetUserServer
// for forward compatibility
type GetUserServer interface {
	GetUserInfo(context.Context, *User) (*User, error)
	mustEmbedUnimplementedGetUserServer()
}

// UnimplementedGetUserServer must be embedded to have forward compatible implementations.
type UnimplementedGetUserServer struct {
}

func (UnimplementedGetUserServer) GetUserInfo(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedGetUserServer) mustEmbedUnimplementedGetUserServer() {}

// UnsafeGetUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetUserServer will
// result in compilation errors.
type UnsafeGetUserServer interface {
	mustEmbedUnimplementedGetUserServer()
}

func RegisterGetUserServer(s grpc.ServiceRegistrar, srv GetUserServer) {
	s.RegisterService(&GetUser_ServiceDesc, srv)
}

func _GetUser_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goApp.GetUser/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUserServer).GetUserInfo(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// GetUser_ServiceDesc is the grpc.ServiceDesc for GetUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goApp.GetUser",
	HandlerType: (*GetUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _GetUser_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goApp/goApp.proto",
}

// AddUserClient is the client API for AddUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddUserClient interface {
	AddNewUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type addUserClient struct {
	cc grpc.ClientConnInterface
}

func NewAddUserClient(cc grpc.ClientConnInterface) AddUserClient {
	return &addUserClient{cc}
}

func (c *addUserClient) AddNewUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/goApp.AddUser/AddNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddUserServer is the server API for AddUser service.
// All implementations must embed UnimplementedAddUserServer
// for forward compatibility
type AddUserServer interface {
	AddNewUser(context.Context, *User) (*User, error)
	mustEmbedUnimplementedAddUserServer()
}

// UnimplementedAddUserServer must be embedded to have forward compatible implementations.
type UnimplementedAddUserServer struct {
}

func (UnimplementedAddUserServer) AddNewUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewUser not implemented")
}
func (UnimplementedAddUserServer) mustEmbedUnimplementedAddUserServer() {}

// UnsafeAddUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddUserServer will
// result in compilation errors.
type UnsafeAddUserServer interface {
	mustEmbedUnimplementedAddUserServer()
}

func RegisterAddUserServer(s grpc.ServiceRegistrar, srv AddUserServer) {
	s.RegisterService(&AddUser_ServiceDesc, srv)
}

func _AddUser_AddNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddUserServer).AddNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goApp.AddUser/AddNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddUserServer).AddNewUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// AddUser_ServiceDesc is the grpc.ServiceDesc for AddUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goApp.AddUser",
	HandlerType: (*AddUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewUser",
			Handler:    _AddUser_AddNewUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goApp/goApp.proto",
}

// UpdateUserClient is the client API for UpdateUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateUserClient interface {
	UpdateOneUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type updateUserClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateUserClient(cc grpc.ClientConnInterface) UpdateUserClient {
	return &updateUserClient{cc}
}

func (c *updateUserClient) UpdateOneUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/goApp.UpdateUser/UpdateOneUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateUserServer is the server API for UpdateUser service.
// All implementations must embed UnimplementedUpdateUserServer
// for forward compatibility
type UpdateUserServer interface {
	UpdateOneUser(context.Context, *User) (*User, error)
	mustEmbedUnimplementedUpdateUserServer()
}

// UnimplementedUpdateUserServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateUserServer struct {
}

func (UnimplementedUpdateUserServer) UpdateOneUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneUser not implemented")
}
func (UnimplementedUpdateUserServer) mustEmbedUnimplementedUpdateUserServer() {}

// UnsafeUpdateUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateUserServer will
// result in compilation errors.
type UnsafeUpdateUserServer interface {
	mustEmbedUnimplementedUpdateUserServer()
}

func RegisterUpdateUserServer(s grpc.ServiceRegistrar, srv UpdateUserServer) {
	s.RegisterService(&UpdateUser_ServiceDesc, srv)
}

func _UpdateUser_UpdateOneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateUserServer).UpdateOneUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goApp.UpdateUser/UpdateOneUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateUserServer).UpdateOneUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateUser_ServiceDesc is the grpc.ServiceDesc for UpdateUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goApp.UpdateUser",
	HandlerType: (*UpdateUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateOneUser",
			Handler:    _UpdateUser_UpdateOneUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goApp/goApp.proto",
}

// DeleteUserClient is the client API for DeleteUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteUserClient interface {
	DeleteOldUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type deleteUserClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteUserClient(cc grpc.ClientConnInterface) DeleteUserClient {
	return &deleteUserClient{cc}
}

func (c *deleteUserClient) DeleteOldUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/goApp.DeleteUser/DeleteOldUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteUserServer is the server API for DeleteUser service.
// All implementations must embed UnimplementedDeleteUserServer
// for forward compatibility
type DeleteUserServer interface {
	DeleteOldUser(context.Context, *User) (*User, error)
	mustEmbedUnimplementedDeleteUserServer()
}

// UnimplementedDeleteUserServer must be embedded to have forward compatible implementations.
type UnimplementedDeleteUserServer struct {
}

func (UnimplementedDeleteUserServer) DeleteOldUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOldUser not implemented")
}
func (UnimplementedDeleteUserServer) mustEmbedUnimplementedDeleteUserServer() {}

// UnsafeDeleteUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteUserServer will
// result in compilation errors.
type UnsafeDeleteUserServer interface {
	mustEmbedUnimplementedDeleteUserServer()
}

func RegisterDeleteUserServer(s grpc.ServiceRegistrar, srv DeleteUserServer) {
	s.RegisterService(&DeleteUser_ServiceDesc, srv)
}

func _DeleteUser_DeleteOldUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteUserServer).DeleteOldUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goApp.DeleteUser/DeleteOldUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteUserServer).DeleteOldUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteUser_ServiceDesc is the grpc.ServiceDesc for DeleteUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goApp.DeleteUser",
	HandlerType: (*DeleteUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOldUser",
			Handler:    _DeleteUser_DeleteOldUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goApp/goApp.proto",
}
